language ESSENCE' 1.0
$   Elitserien handboll -- generic model, needs specific:
$   - sets of teams for N and S divisions
$   - which teams to form complementary divisions
$   - derby sets
$   - venue unavailabilities
$
$   Jeff Larson <jeffreyl@kth.se>
$   Mats Carlsson <matsc@sics.se>

$ * 14-team league
$ * Form 2 divisions which hold a single round-robin tournament
$ 1. Each 7-team division must hold a SRRT to start the season.
$ 2. This must be followed by two SRRTs between the entire league, the
$    second SRRT being a mirror of the first.
$ 3. There must be a minimum number of breaks in the schedule
$    (home-home pair or away-away pair).
$ 4. Each team has one bye during the season (to occur during the
$    divisional RRT).
$ 5. At no point during the season can the number of home and away
$    games played by a team differ by more than 1.
$ 6. Any pair of teams must have consecutive meetings occur at different
$    venues. (AVR)

$$ HAP patterns
letting A = 1 $ away
letting B = 2 $ bye
letting H = 3 $ home

letting divsize = 7
letting group       be domain int(1..7)
letting north_team  be domain int(1..7)
letting south_team  be domain int(8..14)
letting team        be domain int(1..14)
letting first_tour  be domain int(1..7)
letting second_tour be domain int(8..20)
letting third_tour  be domain int(21..33)
letting period      be domain int(1..20)
letting aperiod     be domain int(1..21)
letting allperiod   be domain int(1..33)
letting breakable   be domain int(0,9,11,13,15,17,19)

$ division assignment
given group1, group2 : matrix indexed by [group] of team
$ venue unavailability
given nohome : matrix indexed by [team,allperiod] of int(0..1)

$ unused:
given cpairs : matrix indexed by [int(1..2),int(1..2)] of team
given derby_set : matrix indexed by [int,int(..)] of team
given derby_period : matrix indexed by [int] of period
given heur : matrix indexed by [team] of team
given costtable : matrix indexed by [int(1..max([e | e : team])**2*max([e | e : group])),int(1..4)] of int(0..19)

$ DFA states
letting INIT  = 1
letting B_1   = 2
letting A_1   = 3
letting H_1   = 4
letting A_2   = 5
letting H_2   = 6
letting AB_2  = 7
letting HB_2  = 8
letting A_3   = 9
letting H_3   = 10
letting AB_3  = 11
letting HB_3  = 12
letting A_4   = 13
letting H_4   = 14
letting AB_4  = 15
letting HB_4  = 16
letting A_5   = 17
letting H_5   = 18
letting AB_5  = 19
letting HB_5  = 20
letting A_6   = 21
letting H_6   = 22
letting AB_6  = 23
letting HB_6  = 24
letting AB_7  = 25
letting HB_7  = 26
letting AB_8  = 27
letting HB_8  = 28
letting AB_9  = 29
letting HB_9  = 30
letting AB_20 = 31
letting HB_20 = 32

$  Rows: previous state
$  Cols:  Away, bye, home
letting transition be [
[   A_1,   B_1,   H_1],  $ INIT, start state
[  AB_2,     0,  HB_2],  $ B_1
[     0,  AB_2,   H_2],  $ A_1
[   A_2,  HB_2,     0],  $ H_1
[     0,  AB_3,   H_3],  $ A_2
[   A_3,  HB_3,     0],  $ H_2
[     0,     0,  HB_3],  $ AB_2
[  AB_3,     0,     0],  $ HB_2
[     0,  AB_4,   H_4],  $ A_3
[   A_4,  HB_4,     0],  $ H_3
[     0,     0,  HB_4],  $ AB_3
[  AB_4,     0,     0],  $ HB_3
[     0,  AB_5,   H_5],  $ A_4
[   A_5,  HB_5,     0],  $ H_4
[     0,     0,  HB_5],  $ AB_4
[  AB_5,     0,     0],  $ HB_4
[     0,  AB_6,   H_6],  $ A_5
[   A_6,  HB_6,     0],  $ H_5
[     0,     0,  HB_6],  $ AB_5
[  AB_6,     0,     0],  $ HB_5
[     0,  AB_7,     0],  $ A_6
[     0,  HB_7,     0],  $ H_6
[     0,     0,  HB_7],  $ AB_6
[  AB_7,     0,     0],  $ HB_6
[     0,     0,  HB_8],  $ AB_7
[  AB_8,     0,     0],  $ HB_7
[     0,     0,  HB_9],  $ AB_8, accept state
[  AB_9,     0,     0],  $ HB_8, accept state
[ AB_20,     0,  HB_8],  $ AB_9
[  AB_8,     0, HB_20],  $ HB_9
[     0,     0, HB_20],  $ AB_20, accept state
[ AB_20,     0,     0]   $ HB_20, accept state
]

$ decision variables
find break      : matrix indexed by [team] of breakable
find hap        : matrix indexed by [period,team] of int(A..H)
find contestant : matrix indexed by [period,team] of team
find cost       : int(0..max([e | e : allperiod])*max([e | e : team]))
find lhap       : matrix indexed by [period,team] of int(A..H)
find rowcost    : matrix indexed by [team] of int(0..max([e | e : allperiod]))
find NS         : bool
$ a[i+1] holds state after processing x[i]; accept if a[max+1] in F
find aa         : matrix indexed by [team,aperiod] of allperiod
find ab         : matrix indexed by [team,aperiod] of allperiod
$ rowof[i]=j means TEAMi gets row j of template; teamof is inverse
find rowof      : matrix indexed by [team] of team
find teamof     : matrix indexed by [team] of team

branching on [[hap[p,t] | p : period, t : team], rowof, [contestant[p,t] | t : team, p : period]]


$ objective
minimising cost

such that

$ cost function
forAll t : team . (
    ((t in north_team) -> lhap[(t % divsize)+1,t] = A) /\
    ((t in south_team) -> lhap[(t % divsize)+1,t] = H) /\
    lhap[((t-1) % divsize)+1,t] = B /\
    (forAll p : (breakable - int(0)) . 
        ((break[teamof[t]] = p) <-> (lhap[p,t] = lhap[p+1,t])))
 /\ aa[t,min([e | e : aperiod])] = INIT
 /\ (forAll i : period . aa[t,i+1] = transition[aa[t,i], lhap[i,t]])
 /\ aa[t,max([e | e : aperiod])] in int(AB_8,HB_8,AB_20,HB_20) $ accept states
 /\ rowcost[t] =
        sum r : period . toInt(nohome[teamof[t],r]=1 /\ lhap[r,t]=H)
      + sum q : third_tour .
          toInt(nohome[teamof[t],q]=1 /\ lhap[min([e | e : third_tour])+max([e | e : period])-q,t]=A)
),
cost = sum t : team . rowcost[t],

$ division assignment
forAll i : group . NS <-> (rowof[group1[i]] in north_team),
forAll i : group . NS <-> (rowof[group2[i]] in south_team),

$ inverse(rowof,teamof)
forAll i,j : team . (j = rowof[i] <-> i = teamof[j]),

$ STRUCTURAL CONSTAINTS

$ first round robin tournament (domains)
forAll p : first_tour . forAll t : north_team . contestant[p,t] in north_team,
forAll p : first_tour . forAll t : south_team . contestant[p,t] in south_team,

forAll t : team . (
    ((t in north_team) -> hap[(t % divsize)+1,t] = A) /\
    ((t in south_team) -> hap[(t % divsize)+1,t] = H) /\
    hap[((t-1) % divsize)+1,t] = B /\
    (forAll p : (breakable - int(0)) . (break[t] = p <-> hap[p,t]=hap[p+1,t]))
 /\ ab[t,min([e | e : aperiod])] = INIT
 /\ (forAll i : period . ab[t,i+1] = transition[ab[t,i], hap[i,t]])
 /\ ab[t,max([e | e : aperiod])] in int(AB_8,HB_8,AB_20,HB_20) $ accept states
),

$ RRT (5)
forAll p : period .
$   inverse([contestant[p,t] | t : team],[contestant[p,t] | t : team])
    forAll i,j : team . (j = contestant[p,i] <-> i = contestant[p,j]),

$ RRT (6)
forAll t : team . (
    allDiff([contestant[p,t] | p : first_tour])
 /\ allDiff([contestant[p,t] | p : second_tour])
),

$ either we at home and contestant away (7)
$     or we away and contestant at home
$     or bye (we = contestant)
forAll p : period . 
    forAll t : team . 
        (hap[p,contestant[p,t]] + hap[p,t] = A+H),

$ AVR rule (1) (8)
forAll t : team . allDiff([3*contestant[p,t]+hap[p,t] | p : period]),

$ IMPLIED CONSTRAINTS

$ channel contestant <---> hap (3)
forAll t : team . 
    forAll p : period . 
        (contestant[p,t]=t <-> hap[p,t]=B),

$ exactly two occurrences of every break period (12)
gcc(break, [i | i : breakable], [2 | i : breakable]),

$ symmetry breaking
$ 1st row and 1st column complementary for each division (18)
forAll t : north_team . (
   (hap[t,1] + hap[1,t] = A+H) /\
   (hap[t,1+divsize] + hap[1,t+divsize] = A+H)
),

$dummy last constraint
true

$ variable ordering heuristics
$[
$     int_search([hap[p,t] | p : period, t : team], input_order, indomain_min, complete),
$     int_search(rowof, input_order, indomain_min, complete),
$     int_search([contestant[p,t] | t : team, p : period], input_order, indomain_min, complete)
$]

